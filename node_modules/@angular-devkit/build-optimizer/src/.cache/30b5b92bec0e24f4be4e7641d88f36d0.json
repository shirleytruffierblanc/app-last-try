{"remainingRequest":"/home/shirley/workspace/test-transaltion-angular/version-works/app-last-test/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/home/shirley/workspace/test-transaltion-angular/version-works/app-last-test/node_modules/@nguniversal/common/fesm5/common.js","dependencies":[{"path":"/home/shirley/workspace/test-transaltion-angular/version-works/app-last-test/node_modules/@nguniversal/common/fesm5/common.js","mtime":1550082177957},{"path":"/home/shirley/workspace/test-transaltion-angular/version-works/app-last-test/node_modules/cache-loader/dist/cjs.js","mtime":1550082179288},{"path":"/home/shirley/workspace/test-transaltion-angular/version-works/app-last-test/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1550082180522}],"contextDependencies":[],"result":["import { HTTP_INTERCEPTORS, HttpHeaders, HttpResponse } from '@angular/common/http';\nimport { APP_INITIALIZER, ApplicationRef, Injectable, NgModule } from '@angular/core';\nimport { BrowserTransferStateModule, TransferState, makeStateKey } from '@angular/platform-browser';\nimport { of } from 'rxjs';\nimport { filter, take, tap } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\nvar __values = (undefined && undefined.__values) || function (o) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\n    if (m)\n        return m.call(o);\n    return {\n        next: function () {\n            if (o && i >= o.length)\n                o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n};\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction getHeadersMap(headers) {\n    var headersMap = {};\n    try {\n        for (var _a = __values(headers.keys()), _b = _a.next(); !_b.done; _b = _a.next()) {\n            var key = _b.value;\n            headersMap[key] = headers.getAll(key);\n        }\n    }\n    catch (e_1_1) {\n        e_1 = { error: e_1_1 };\n    }\n    finally {\n        try {\n            if (_b && !_b.done && (_c = _a.return))\n                _c.call(_a);\n        }\n        finally {\n            if (e_1)\n                throw e_1.error;\n        }\n    }\n    return headersMap;\n    var e_1, _c;\n}\nvar TransferHttpCacheInterceptor = /*@__PURE__*/ (function () {\n    function TransferHttpCacheInterceptor(appRef, transferState) {\n        var _this = this;\n        this.transferState = transferState;\n        this.isCacheActive = true;\n        // Stop using the cache if the application has stabilized, indicating initial rendering is\n        // complete.\n        appRef.isStable\n            .pipe(filter(function (isStable) { return isStable; }), take(1)).toPromise()\n            .then(function () { _this.isCacheActive = false; });\n    }\n    TransferHttpCacheInterceptor.prototype.invalidateCacheEntry = function (url) {\n        var _this = this;\n        Object.keys(this.transferState['store'])\n            .forEach(function (key) { return key.includes(url) ? _this.transferState.remove(makeStateKey(key)) : null; });\n    };\n    TransferHttpCacheInterceptor.prototype.makeCacheKey = function (method, url, params) {\n        // make the params encoded same as a url so it's easy to identify\n        var encodedParams = params.keys().sort().map(function (k) { return k + \"=\" + params.get(k); }).join('&');\n        var key = (method === 'GET' ? 'G.' : 'H.') + url + '?' + encodedParams;\n        return makeStateKey(key);\n    };\n    TransferHttpCacheInterceptor.prototype.intercept = function (req, next) {\n        var _this = this;\n        // Stop using the cache if there is a mutating call.\n        if (req.method !== 'GET' && req.method !== 'HEAD') {\n            this.isCacheActive = false;\n            this.invalidateCacheEntry(req.url);\n        }\n        if (!this.isCacheActive) {\n            // Cache is no longer active. Pass the request through.\n            return next.handle(req);\n        }\n        var storeKey = this.makeCacheKey(req.method, req.url, req.params);\n        if (this.transferState.hasKey(storeKey)) {\n            // Request found in cache. Respond using it.\n            var response = this.transferState.get(storeKey, {});\n            return of(new HttpResponse({\n                body: response.body,\n                headers: new HttpHeaders(response.headers),\n                status: response.status,\n                statusText: response.statusText,\n                url: response.url,\n            }));\n        }\n        else {\n            // Request not found in cache. Make the request and cache it.\n            var httpEvent = next.handle(req);\n            return httpEvent\n                .pipe(tap(function (event) {\n                if (event instanceof HttpResponse) {\n                    _this.transferState.set(storeKey, {\n                        body: event.body,\n                        headers: getHeadersMap(event.headers),\n                        status: event.status,\n                        statusText: event.statusText,\n                        url: event.url,\n                    });\n                }\n            }));\n        }\n    };\n    return TransferHttpCacheInterceptor;\n}());\n/**\n * An NgModule used in conjunction with `ServerTransferHttpCacheModule` to transfer cached HTTP\n * calls from the server to the client application.\n */\nvar TransferHttpCacheModule = /*@__PURE__*/ (function () {\n    function TransferHttpCacheModule() {\n    }\n    return TransferHttpCacheModule;\n}());\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nfunction domContentLoadedFactory(doc) {\n    return function () {\n        return new Promise(function (resolve, _reject) {\n            var contentLoaded = function () {\n                doc.removeEventListener('DOMContentLoaded', contentLoaded);\n                resolve();\n            };\n            doc.addEventListener('DOMContentLoaded', contentLoaded);\n        });\n    };\n}\nvar StateTransferInitializerModule = /*@__PURE__*/ (function () {\n    function StateTransferInitializerModule() {\n    }\n    return StateTransferInitializerModule;\n}());\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { domContentLoadedFactory as ɵnguniversal_modules_common_common_a, TransferHttpCacheModule, StateTransferInitializerModule, TransferHttpCacheInterceptor as ɵTransferHttpCacheInterceptor };\n//# sourceMappingURL=common.js.map\n",null]}