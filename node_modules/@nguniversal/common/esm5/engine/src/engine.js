var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
/**
 * @license
 * Copyright Google LLC All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { ResourceLoader } from '@angular/compiler';
import { NgModuleFactory, CompilerFactory } from '@angular/core';
import { INITIAL_CONFIG, renderModuleFactory, platformDynamicServer } from '@angular/platform-server';
import * as fs from 'fs';
import { FileLoader } from './file-loader';
/**
 * A common rendering engine utility. This abstracts the logic
 * for handling the platformServer compiler, the module cache, and
 * the document loader
 */
var CommonEngine = /** @class */ (function () {
    function CommonEngine(moduleOrFactory, providers) {
        if (providers === void 0) { providers = []; }
        this.moduleOrFactory = moduleOrFactory;
        this.providers = providers;
        this.factoryCacheMap = new Map();
        this.templateCache = {};
    }
    /** Return an instance of the platformServer compiler */
    CommonEngine.prototype.getCompiler = function () {
        var compilerFactory = platformDynamicServer().injector.get(CompilerFactory);
        return compilerFactory.createCompiler([
            { providers: [{ provide: ResourceLoader, useClass: FileLoader, deps: [] }] }
        ]);
    };
    /**
     * Render an HTML document for a specific URL with specified
     * render options
     */
    CommonEngine.prototype.render = function (opts) {
        return __awaiter(this, void 0, void 0, function () {
            var doc, _a, extraProviders, factory;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = opts.document;
                        if (_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.getDocument(opts.documentFilePath)];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2:
                        doc = _a;
                        extraProviders = __spread((opts.providers || []), (this.providers || []), [
                            {
                                provide: INITIAL_CONFIG,
                                useValue: {
                                    document: doc,
                                    url: opts.url
                                }
                            }
                        ]);
                        return [4 /*yield*/, this.getFactory()];
                    case 3:
                        factory = _b.sent();
                        return [2 /*return*/, renderModuleFactory(factory, { extraProviders: extraProviders })];
                }
            });
        });
    };
    /** Return the factory for a given engine instance */
    CommonEngine.prototype.getFactory = function () {
        var _this = this;
        // If module has been compiled AoT
        var moduleOrFactory = this.moduleOrFactory;
        if (moduleOrFactory instanceof NgModuleFactory) {
            return Promise.resolve(moduleOrFactory);
        }
        else {
            // we're in JIT mode
            var moduleFactory = this.factoryCacheMap.get(moduleOrFactory);
            // If module factory is cached
            if (moduleFactory) {
                return Promise.resolve(moduleFactory);
            }
            // Compile the module and cache it
            return this.getCompiler().compileModuleAsync(moduleOrFactory)
                .then(function (factory) {
                _this.factoryCacheMap.set(moduleOrFactory, factory);
                return factory;
            });
        }
    };
    /** Retrieve the document from the cache or the filesystem */
    CommonEngine.prototype.getDocument = function (filePath) {
        var doc = this.templateCache[filePath] = this.templateCache[filePath] ||
            fs.readFileSync(filePath).toString();
        // As  promise so we can change the API later without breaking
        return Promise.resolve(doc);
    };
    return CommonEngine;
}());
export { CommonEngine };

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5naW5lLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9jb21tb24vZW5naW5lL3NyYy9lbmdpbmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7Ozs7R0FNRztBQUNILE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUNqRCxPQUFPLEVBQWlCLGVBQWUsRUFBRSxlQUFlLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQy9GLE9BQU8sRUFBQyxjQUFjLEVBQUUsbUJBQW1CLEVBQUUscUJBQXFCLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUNwRyxPQUFPLEtBQUssRUFBRSxNQUFNLElBQUksQ0FBQztBQUV6QixPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBR3pDOzs7O0dBSUc7QUFDSDtJQWFFLHNCQUFvQixlQUErQyxFQUMvQyxTQUFnQztRQUFoQywwQkFBQSxFQUFBLGNBQWdDO1FBRGhDLG9CQUFlLEdBQWYsZUFBZSxDQUFnQztRQUMvQyxjQUFTLEdBQVQsU0FBUyxDQUF1QjtRQUo1QyxvQkFBZSxHQUFHLElBQUksR0FBRyxFQUFpQyxDQUFDO1FBQzNELGtCQUFhLEdBQTRCLEVBQUUsQ0FBQztJQUdHLENBQUM7SUFaeEQsd0RBQXdEO0lBQ3hELGtDQUFXLEdBQVg7UUFDRSxJQUFNLGVBQWUsR0FBb0IscUJBQXFCLEVBQUUsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBQy9GLE1BQU0sQ0FBQyxlQUFlLENBQUMsY0FBYyxDQUFDO1lBQ3BDLEVBQUMsU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsY0FBYyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBQyxDQUFDLEVBQUM7U0FDekUsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQVFEOzs7T0FHRztJQUNHLDZCQUFNLEdBQVosVUFBYSxJQUFtQjs7Ozs7O3dCQUVsQixLQUFBLElBQUksQ0FBQyxRQUFRLENBQUE7Z0NBQWIsd0JBQWE7d0JBQUkscUJBQU0sSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFLLENBQUMsZ0JBQTBCLENBQUMsRUFBQTs7OEJBQXhELFNBQXdEOzs7d0JBQS9FLEdBQUcsS0FBNEU7d0JBQy9FLGNBQWMsWUFDZixDQUFDLElBQUksQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDLEVBQ3RCLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBSSxFQUFFLENBQUM7NEJBQ3pCO2dDQUNFLE9BQU8sRUFBRSxjQUFjO2dDQUN2QixRQUFRLEVBQUU7b0NBQ1IsUUFBUSxFQUFFLEdBQUc7b0NBQ2IsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHO2lDQUNkOzZCQUNGOzBCQUNGLENBQUM7d0JBRWMscUJBQU0sSUFBSSxDQUFDLFVBQVUsRUFBRSxFQUFBOzt3QkFBakMsT0FBTyxHQUFHLFNBQXVCO3dCQUN2QyxzQkFBTyxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsRUFBQyxjQUFjLGdCQUFBLEVBQUMsQ0FBQyxFQUFDOzs7O0tBQ3ZEO0lBRUQscURBQXFEO0lBQ3JELGlDQUFVLEdBQVY7UUFBQSxpQkFxQkM7UUFwQkMsa0NBQWtDO1FBQ2xDLElBQU0sZUFBZSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUM7UUFDN0MsRUFBRSxDQUFDLENBQUMsZUFBZSxZQUFZLGVBQWUsQ0FBQyxDQUFDLENBQUM7WUFDL0MsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDMUMsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sb0JBQW9CO1lBQ3BCLElBQUksYUFBYSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBRTlELDhCQUE4QjtZQUM5QixFQUFFLENBQUMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO2dCQUNsQixNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUN4QyxDQUFDO1lBRUQsa0NBQWtDO1lBQ2xDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUMsa0JBQWtCLENBQUMsZUFBZSxDQUFDO2lCQUMxRCxJQUFJLENBQUMsVUFBQyxPQUFPO2dCQUNaLEtBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFDbkQsTUFBTSxDQUFDLE9BQU8sQ0FBQztZQUNqQixDQUFDLENBQUMsQ0FBQztRQUNQLENBQUM7SUFDSCxDQUFDO0lBRUQsNkRBQTZEO0lBQ3JELGtDQUFXLEdBQW5CLFVBQW9CLFFBQWdCO1FBQ2xDLElBQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7WUFDdkUsRUFBRSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUVyQyw4REFBOEQ7UUFDOUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUNILG1CQUFDO0FBQUQsQ0FBQyxBQXZFRCxJQXVFQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBHb29nbGUgTExDIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHtSZXNvdXJjZUxvYWRlcn0gZnJvbSAnQGFuZ3VsYXIvY29tcGlsZXInO1xuaW1wb3J0IHtDb21waWxlciwgVHlwZSwgTmdNb2R1bGVGYWN0b3J5LCBDb21waWxlckZhY3RvcnksIFN0YXRpY1Byb3ZpZGVyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7SU5JVElBTF9DT05GSUcsIHJlbmRlck1vZHVsZUZhY3RvcnksIHBsYXRmb3JtRHluYW1pY1NlcnZlcn0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tc2VydmVyJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcblxuaW1wb3J0IHtGaWxlTG9hZGVyfSBmcm9tICcuL2ZpbGUtbG9hZGVyJztcbmltcG9ydCB7UmVuZGVyT3B0aW9uc30gZnJvbSAnLi9pbnRlcmZhY2VzJztcblxuLyoqXG4gKiBBIGNvbW1vbiByZW5kZXJpbmcgZW5naW5lIHV0aWxpdHkuIFRoaXMgYWJzdHJhY3RzIHRoZSBsb2dpY1xuICogZm9yIGhhbmRsaW5nIHRoZSBwbGF0Zm9ybVNlcnZlciBjb21waWxlciwgdGhlIG1vZHVsZSBjYWNoZSwgYW5kXG4gKiB0aGUgZG9jdW1lbnQgbG9hZGVyXG4gKi9cbmV4cG9ydCBjbGFzcyBDb21tb25FbmdpbmUge1xuXG4gIC8qKiBSZXR1cm4gYW4gaW5zdGFuY2Ugb2YgdGhlIHBsYXRmb3JtU2VydmVyIGNvbXBpbGVyICovXG4gIGdldENvbXBpbGVyKCk6IENvbXBpbGVyIHtcbiAgICBjb25zdCBjb21waWxlckZhY3Rvcnk6IENvbXBpbGVyRmFjdG9yeSA9IHBsYXRmb3JtRHluYW1pY1NlcnZlcigpLmluamVjdG9yLmdldChDb21waWxlckZhY3RvcnkpO1xuICAgIHJldHVybiBjb21waWxlckZhY3RvcnkuY3JlYXRlQ29tcGlsZXIoW1xuICAgICAge3Byb3ZpZGVyczogW3twcm92aWRlOiBSZXNvdXJjZUxvYWRlciwgdXNlQ2xhc3M6IEZpbGVMb2FkZXIsIGRlcHM6IFtdfV19XG4gICAgXSk7XG4gIH1cblxuICBwcml2YXRlIGZhY3RvcnlDYWNoZU1hcCA9IG5ldyBNYXA8VHlwZTx7fT4sIE5nTW9kdWxlRmFjdG9yeTx7fT4+KCk7XG4gIHByaXZhdGUgdGVtcGxhdGVDYWNoZToge1trZXk6IHN0cmluZ106IHN0cmluZ30gPSB7fTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG1vZHVsZU9yRmFjdG9yeTogVHlwZTx7fT4gfCBOZ01vZHVsZUZhY3Rvcnk8e30+LFxuICAgICAgICAgICAgICBwcml2YXRlIHByb3ZpZGVyczogU3RhdGljUHJvdmlkZXJbXSA9IFtdKSB7fVxuXG4gIC8qKlxuICAgKiBSZW5kZXIgYW4gSFRNTCBkb2N1bWVudCBmb3IgYSBzcGVjaWZpYyBVUkwgd2l0aCBzcGVjaWZpZWRcbiAgICogcmVuZGVyIG9wdGlvbnNcbiAgICovXG4gIGFzeW5jIHJlbmRlcihvcHRzOiBSZW5kZXJPcHRpb25zKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICAvLyBpZiBvcHRzLmRvY3VtZW50IGRvc2VuJ3QgZXhpc3QgdGhlbiBvcHRzLmRvY3VtZW50RmlsZVBhdGggbXVzdFxuICAgIGNvbnN0IGRvYyA9IG9wdHMuZG9jdW1lbnQgfHwgYXdhaXQgdGhpcy5nZXREb2N1bWVudChvcHRzIS5kb2N1bWVudEZpbGVQYXRoIGFzIHN0cmluZyk7XG4gICAgY29uc3QgZXh0cmFQcm92aWRlcnMgPSBbXG4gICAgICAuLi4ob3B0cy5wcm92aWRlcnMgfHwgW10pLFxuICAgICAgLi4uKHRoaXMucHJvdmlkZXJzIHx8IFtdKSxcbiAgICAgIHtcbiAgICAgICAgcHJvdmlkZTogSU5JVElBTF9DT05GSUcsXG4gICAgICAgIHVzZVZhbHVlOiB7XG4gICAgICAgICAgZG9jdW1lbnQ6IGRvYyxcbiAgICAgICAgICB1cmw6IG9wdHMudXJsXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdO1xuXG4gICAgY29uc3QgZmFjdG9yeSA9IGF3YWl0IHRoaXMuZ2V0RmFjdG9yeSgpO1xuICAgIHJldHVybiByZW5kZXJNb2R1bGVGYWN0b3J5KGZhY3RvcnksIHtleHRyYVByb3ZpZGVyc30pO1xuICB9XG5cbiAgLyoqIFJldHVybiB0aGUgZmFjdG9yeSBmb3IgYSBnaXZlbiBlbmdpbmUgaW5zdGFuY2UgKi9cbiAgZ2V0RmFjdG9yeSgpOiBQcm9taXNlPE5nTW9kdWxlRmFjdG9yeTx7fT4+IHtcbiAgICAvLyBJZiBtb2R1bGUgaGFzIGJlZW4gY29tcGlsZWQgQW9UXG4gICAgY29uc3QgbW9kdWxlT3JGYWN0b3J5ID0gdGhpcy5tb2R1bGVPckZhY3Rvcnk7XG4gICAgaWYgKG1vZHVsZU9yRmFjdG9yeSBpbnN0YW5jZW9mIE5nTW9kdWxlRmFjdG9yeSkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShtb2R1bGVPckZhY3RvcnkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB3ZSdyZSBpbiBKSVQgbW9kZVxuICAgICAgbGV0IG1vZHVsZUZhY3RvcnkgPSB0aGlzLmZhY3RvcnlDYWNoZU1hcC5nZXQobW9kdWxlT3JGYWN0b3J5KTtcblxuICAgICAgLy8gSWYgbW9kdWxlIGZhY3RvcnkgaXMgY2FjaGVkXG4gICAgICBpZiAobW9kdWxlRmFjdG9yeSkge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG1vZHVsZUZhY3RvcnkpO1xuICAgICAgfVxuXG4gICAgICAvLyBDb21waWxlIHRoZSBtb2R1bGUgYW5kIGNhY2hlIGl0XG4gICAgICByZXR1cm4gdGhpcy5nZXRDb21waWxlcigpLmNvbXBpbGVNb2R1bGVBc3luYyhtb2R1bGVPckZhY3RvcnkpXG4gICAgICAgIC50aGVuKChmYWN0b3J5KSA9PiB7XG4gICAgICAgICAgdGhpcy5mYWN0b3J5Q2FjaGVNYXAuc2V0KG1vZHVsZU9yRmFjdG9yeSwgZmFjdG9yeSk7XG4gICAgICAgICAgcmV0dXJuIGZhY3Rvcnk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBSZXRyaWV2ZSB0aGUgZG9jdW1lbnQgZnJvbSB0aGUgY2FjaGUgb3IgdGhlIGZpbGVzeXN0ZW0gKi9cbiAgcHJpdmF0ZSBnZXREb2N1bWVudChmaWxlUGF0aDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgICBjb25zdCBkb2MgPSB0aGlzLnRlbXBsYXRlQ2FjaGVbZmlsZVBhdGhdID0gdGhpcy50ZW1wbGF0ZUNhY2hlW2ZpbGVQYXRoXSB8fFxuICAgIGZzLnJlYWRGaWxlU3luYyhmaWxlUGF0aCkudG9TdHJpbmcoKTtcblxuICAgIC8vIEFzICBwcm9taXNlIHNvIHdlIGNhbiBjaGFuZ2UgdGhlIEFQSSBsYXRlciB3aXRob3V0IGJyZWFraW5nXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShkb2MpO1xuICB9XG59XG4iXX0=