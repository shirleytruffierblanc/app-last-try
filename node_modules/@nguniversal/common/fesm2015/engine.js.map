{"version":3,"file":"engine.js","sources":["../../../../../../../../../../../execroot/nguniversal/bazel-out/darwin-fastbuild/bin/modules/common/engine/src/file-loader.ts","../../../../../../../../../../../execroot/nguniversal/bazel-out/darwin-fastbuild/bin/modules/common/engine/src/engine.ts","../../../../../../../../../../../execroot/nguniversal/bazel-out/darwin-fastbuild/bin/modules/common/engine/engine_public_index.ts"],"sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as fs from 'fs';\nimport { ResourceLoader } from '@angular/compiler';\n\n/** ResourceLoader implementation for loading files */\nexport class FileLoader implements ResourceLoader {\n  get(url: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n      fs.readFile(url, (err: NodeJS.ErrnoException, buffer: Buffer) => {\n        if (err) {\n          return reject(err);\n        }\n\n        resolve(buffer.toString());\n      });\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {ResourceLoader} from '@angular/compiler';\nimport {Compiler, Type, NgModuleFactory, CompilerFactory, StaticProvider} from '@angular/core';\nimport {INITIAL_CONFIG, renderModuleFactory, platformDynamicServer} from '@angular/platform-server';\nimport * as fs from 'fs';\n\nimport {FileLoader} from './file-loader';\nimport {RenderOptions} from './interfaces';\n\n/**\n * A common rendering engine utility. This abstracts the logic\n * for handling the platformServer compiler, the module cache, and\n * the document loader\n */\nexport class CommonEngine {\n\n  /** Return an instance of the platformServer compiler */\n  getCompiler(): Compiler {\n    const compilerFactory: CompilerFactory = platformDynamicServer().injector.get(CompilerFactory);\n    return compilerFactory.createCompiler([\n      {providers: [{provide: ResourceLoader, useClass: FileLoader, deps: []}]}\n    ]);\n  }\n\n  private factoryCacheMap = new Map<Type<{}>, NgModuleFactory<{}>>();\n  private templateCache: {[key: string]: string} = {};\n\n  constructor(private moduleOrFactory: Type<{}> | NgModuleFactory<{}>,\n              private providers: StaticProvider[] = []) {}\n\n  /**\n   * Render an HTML document for a specific URL with specified\n   * render options\n   */\n  async render(opts: RenderOptions): Promise<string> {\n    // if opts.document dosen't exist then opts.documentFilePath must\n    const doc = opts.document || await this.getDocument(opts!.documentFilePath as string);\n    const extraProviders = [\n      ...(opts.providers || []),\n      ...(this.providers || []),\n      {\n        provide: INITIAL_CONFIG,\n        useValue: {\n          document: doc,\n          url: opts.url\n        }\n      }\n    ];\n\n    const factory = await this.getFactory();\n    return renderModuleFactory(factory, {extraProviders});\n  }\n\n  /** Return the factory for a given engine instance */\n  getFactory(): Promise<NgModuleFactory<{}>> {\n    // If module has been compiled AoT\n    const moduleOrFactory = this.moduleOrFactory;\n    if (moduleOrFactory instanceof NgModuleFactory) {\n      return Promise.resolve(moduleOrFactory);\n    } else {\n      // we're in JIT mode\n      let moduleFactory = this.factoryCacheMap.get(moduleOrFactory);\n\n      // If module factory is cached\n      if (moduleFactory) {\n        return Promise.resolve(moduleFactory);\n      }\n\n      // Compile the module and cache it\n      return this.getCompiler().compileModuleAsync(moduleOrFactory)\n        .then((factory) => {\n          this.factoryCacheMap.set(moduleOrFactory, factory);\n          return factory;\n        });\n    }\n  }\n\n  /** Retrieve the document from the cache or the filesystem */\n  private getDocument(filePath: string): Promise<string> {\n    const doc = this.templateCache[filePath] = this.templateCache[filePath] ||\n    fs.readFileSync(filePath).toString();\n\n    // As  promise so we can change the API later without breaking\n    return Promise.resolve(doc);\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["fs.readFile","fs.readFileSync"],"mappings":";;;;;;;;;AAOA;;;AAIA;;;;;IACE,GAAG,CAAC,GAAW;QACb,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM;YACjCA,QAAW,CAAC,GAAG,EAAE,CAAC,GAA0B,EAAE,MAAc;gBAC1D,IAAI,GAAG,EAAE;oBACP,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;iBACpB;gBAED,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;aAC5B,CAAC,CAAC;SACJ,CAAC,CAAC;KACJ;CACF;;;;;;;;;;;;;;AChBD;;;;;AAaA;;;;;IAaE,YAAoB,eAA+C,EAC/C,YAA8B,EAAE;QADhC,oBAAe,GAAf,eAAe,CAAgC;QAC/C,cAAS,GAAT,SAAS;+BAJH,IAAI,GAAG,EAAiC;6BACjB,EAAE;KAGK;;;;;IAXxD,WAAW;QACT,uBAAM,eAAe,GAAoB,qBAAqB,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;QAC/F,OAAO,eAAe,CAAC,cAAc,CAAC;YACpC,EAAC,SAAS,EAAE,CAAC,EAAC,OAAO,EAAE,cAAc,EAAE,QAAQ,EAAE,UAAU,EAAE,IAAI,EAAE,EAAE,EAAC,CAAC,EAAC;SACzE,CAAC,CAAC;KACJ;;;;;;;IAYK,MAAM,CAAC,IAAmB;;;YAE9B,uBAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,KAAI,MAAM,IAAI,CAAC,WAAW,qBAAC,IAAI,GAAE,gBAAgB,EAAW,CAAA,CAAC;YACtF,uBAAM,cAAc,GAAG;gBACrB,IAAI,IAAI,CAAC,SAAS,IAAI,EAAE,CAAC;gBACzB,IAAI,IAAI,CAAC,SAAS,IAAI,EAAE,CAAC;gBACzB;oBACE,OAAO,EAAE,cAAc;oBACvB,QAAQ,EAAE;wBACR,QAAQ,EAAE,GAAG;wBACb,GAAG,EAAE,IAAI,CAAC,GAAG;qBACd;iBACF;aACF,CAAC;YAEF,uBAAM,OAAO,GAAG,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;YACxC,OAAO,mBAAmB,CAAC,OAAO,EAAE,EAAC,cAAc,EAAC,CAAC,CAAC;;KACvD;;;;;IAGD,UAAU;;QAER,uBAAM,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC;QAC7C,IAAI,eAAe,YAAY,eAAe,EAAE;YAC9C,OAAO,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC;SACzC;aAAM;;YAEL,qBAAI,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;;YAG9D,IAAI,aAAa,EAAE;gBACjB,OAAO,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;aACvC;;YAGD,OAAO,IAAI,CAAC,WAAW,EAAE,CAAC,kBAAkB,CAAC,eAAe,CAAC;iBAC1D,IAAI,CAAC,CAAC,OAAO;gBACZ,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;gBACnD,OAAO,OAAO,CAAC;aAChB,CAAC,CAAC;SACN;KACF;;;;;;IAGO,WAAW,CAAC,QAAgB;QAClC,uBAAM,GAAG,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC;YACvEC,YAAe,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC;;QAGrC,OAAO,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;;CAE/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3FD;;GAEG;;;;"}